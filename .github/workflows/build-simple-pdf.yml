  name: Build Simple PDF Converter

  on:
    workflow_dispatch:

  jobs:
    build:
      runs-on: windows-latest
      steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Create simple converter
        shell: pwsh
        run: |
          $content = @'
  import tkinter as tk
  from tkinter import ttk, filedialog, messagebox, scrolledtext
  import threading
  import os
  import requests
  from urllib.parse import urlparse
  import tempfile
  import subprocess
  import sys

  class SimpleConverter:
      def __init__(self, root):
          self.root = root
          self.root.title("URL to HTML/PDF Converter")
          self.root.geometry("600x400")
          self.create_widgets()

      def create_widgets(self):
          main_frame = ttk.Frame(self.root, padding="10")
          main_frame.pack(fill=tk.BOTH, expand=True)

          ttk.Label(main_frame, text="URL to HTML Converter", font=("Arial", 14, "bold")).pack(pady=10)
          ttk.Label(main_frame, text="※ HTMLファイルをブラウザで開いて「印刷→PDFに保存」でPDF化可能").pack(pady=5)

          # File selection
          file_frame = ttk.Frame(main_frame)
          file_frame.pack(fill=tk.X, pady=5)
          ttk.Label(file_frame, text="URLリスト:").pack(side=tk.LEFT)
          self.file_var = tk.StringVar()
          ttk.Entry(file_frame, textvariable=self.file_var, width=40).pack(side=tk.LEFT, padx=5)
          ttk.Button(file_frame, text="参照", command=self.select_file).pack(side=tk.LEFT)

          # Output dir
          dir_frame = ttk.Frame(main_frame)
          dir_frame.pack(fill=tk.X, pady=5)
          ttk.Label(dir_frame, text="出力先:").pack(side=tk.LEFT)
          self.dir_var = tk.StringVar()
          ttk.Entry(dir_frame, textvariable=self.dir_var, width=40).pack(side=tk.LEFT, padx=5)
          ttk.Button(dir_frame, text="参照", command=self.select_dir).pack(side=tk.LEFT)

          # Convert button
          ttk.Button(main_frame, text="変換開始", command=self.start_convert).pack(pady=10)

          # Log
          ttk.Label(main_frame, text="ログ:").pack(anchor=tk.W)
          self.log_text = scrolledtext.ScrolledText(main_frame, height=15)
          self.log_text.pack(fill=tk.BOTH, expand=True, pady=5)

      def select_file(self):
          file = filedialog.askopenfilename(filetypes=[("Text files", "*.txt")])
          if file:
              self.file_var.set(file)
              if not self.dir_var.get():
                  self.dir_var.set(os.path.dirname(file))

      def select_dir(self):
          dir_path = filedialog.askdirectory()
          if dir_path:
              self.dir_var.set(dir_path)

      def log(self, msg):
          self.log_text.insert(tk.END, msg + "\n")
          self.log_text.see(tk.END)
          self.root.update()

      def start_convert(self):
          if not self.file_var.get() or not self.dir_var.get():
              messagebox.showerror("エラー", "ファイルとディレクトリを選択してください")
              return
          threading.Thread(target=self.convert_worker, daemon=True).start()

      def convert_worker(self):
          try:
              with open(self.file_var.get(), 'r', encoding='utf-8') as f:
                  urls = [line.strip() for line in f if line.strip()]

              os.makedirs(self.dir_var.get(), exist_ok=True)
              success = 0

              for i, url in enumerate(urls, 1):
                  try:
                      self.log(f"[{i}/{len(urls)}] ダウンロード中: {url}")

                      response = requests.get(url, timeout=30, headers={
                          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                      })
                      response.raise_for_status()

                      filename = f"page_{i}.html"
                      output_path = os.path.join(self.dir_var.get(), filename)

                      with open(output_path, 'w', encoding='utf-8') as f:
                          f.write(response.text)

                      self.log(f"    ✓ 保存完了: {filename}")
                      success += 1

                  except Exception as e:
                      self.log(f"    ✗ エラー: {str(e)}")

              self.log(f"\n完了: {success}/{len(urls)} 件のHTMLファイルを保存")
              self.log("※ ブラウザでHTMLを開いて「Ctrl+P」→「PDFに保存」でPDF化できます")
              messagebox.showinfo("完了", f"{success}/{len(urls)} 件のHTMLファイルを保存しました")

          except Exception as e:
              self.log(f"エラー: {str(e)}")
              messagebox.showerror("エラー", str(e))

  if __name__ == "__main__":
      root = tk.Tk()
      app = SimpleConverter(root)
      root.mainloop()
  '@
          $content | Out-File -FilePath "simple_converter.py" -Encoding UTF8

      - name: Install dependencies and build
        run: |
          pip install pyinstaller requests
          pyinstaller --onefile --windowed --name URLtoHTML_Converter simple_converter.py

      - name: Upload executable
        uses: actions/upload-artifact@v4
        with:
          name: URLtoHTML_Converter_Windows
          path: dist/URLtoHTML_Converter.exe
  EOF
